[
  {
    "path": "Java課程/2023-10-15-javaif/",
    "title": "Java Decision",
    "description": "這是每個程式語言最重要的概念，每個難關就是一個if，跟人生一樣，所以請好好練if",
    "author": [
      {
        "name": "董宸賓",
        "url": {}
      }
    ],
    "date": "2023-10-15",
    "categories": [],
    "contents": "\n\nContents\nif\nTernary Operator\nswitch\n\n\n\n\n\n\n\nif\nif是最基礎也最重要的語法\n也是最需要經驗磨練的\n\n語法\nif (條件句) {\n敘述句\n} else if(條件句){\n敘述句\n}else{\n敘述句\n}\n\n範例\n\npublic static void if1() {\n        int time = 22;\n        if (time == 18) {\n            System.out.println(\"去吃飯\");\n        } else if (time == 12) {\n            System.out.println(\"去睡覺\");\n        } else {\n            System.out.println(\"去讀書\");\n        }\n    }\n\n\n\n去讀書\n\n\n\nTernary Operator\n看起很困難，但其實很簡單的用法\n如果符合敘述句，該變數會等於前面，反之亦然\n最重要的是它的結果是一個變數\n\n語法\n型別 變數  =  (條件句)  ?  正確敘述句 : 錯誤敘述句;\n範例\n\npublic class Java_if {\n public static void main(String[] argv) {\n   \n  int time = 22\n  String result = (time==18) ? \"去吃飯\":\"去讀書\";\n  System.out.println(result);\n }\n  \n}\n\n輸出結果\n\n去讀書\n\n\nswitch\n比較適合用於單一的轉換\n優點是不像if一樣要跑很多分支\n\n語法\nswitch(描述句) {\n  case a:\n  敘述句;\n  break;\n  case b:\n  敘述句;\n  break;\n  default:\n  敘述句;\n  \n}\n\n範例\n\npublic static void switch1() {\n        int time = 22;\n        String result = \"\";\n        switch (time) {\n        case 0:\n            result = \"去睡覺\";\n            break;\n        case 12:\n            result = \"去吃飯\";\n            break;\n        default:\n            result = \"去讀書\";\n        }\n        System.out.println(result);\n    }\n\n結果\n\n去讀書\n\n\n\nswitch的使用時機：當只要單一變數時\nEx:選單\n\n\n\n\n",
    "preview": {},
    "last_modified": "2023-10-16T01:11:01+08:00",
    "input_file": {}
  },
  {
    "path": "Java課程/2023-10-15-javatool/",
    "title": "A bag of Java tool",
    "description": "相比較其他語言，Java不只嚴格，連print都比別人費工，這章節存放一些枝微末節的新手技巧",
    "author": [
      {
        "name": "董宸賓",
        "url": {}
      }
    ],
    "date": "2023-10-15",
    "categories": [],
    "contents": "\n\nContents\nprint, printf, println\nprint\nprinln\nprintf\n\nScanner\n前置作業\n輸入的型別\n檢查輸入的型別\n示範\n\n\n\n\n\n\n\n\n111{.aa}\nprint, printf, println\n想到這個就覺得有點煩\n但其實他們的功能滿鮮明的\n下圖說明\nprint\n最基礎的print，特性如下：\n不會自動換行，透過\\n換行\n用＋連接\nprinln\n特別好的換行方法，特性如下：\n用＋連接\nprintf\n當你需要print複雜一點點的東西時，請呼叫它\n不會自動換行，透過\\n換行\n只有一個””\n搭配以下格式輸出\n\n改變輸出的樣式\n\n這個圖表幫助你比較幾個不同的樣式\n\n\n範例\n\npublic static void printf() {\n        Scanner sc = new Scanner(System.in);\n        int inum = 1113;\n        String s = \"我是字串\";\n        double dnum = 1113.1028d;\n        System.out.printf(\"printf加\\\\n才會自動換行\\n\");\n        System.out.printf(\"%d%s%f\\n\",inum,s,dnum);\n        System.out.printf(\"%.2f\\n\",dnum);//控制小數點位數\n        System.out.printf(\"%+f\\n\",dnum);//顯示＋號\n        System.out.printf(\"%,f\\n\",dnum);//三個數字一個逗點\n        System.out.printf(\"%07d\\n\",inum);往前占7格，並補上0\n        System.out.printf(\"%-5d%s\\n\",inum,s);往後占5格\n    }\n\n結果\nprintf加\\n才會自動換行\n1113我是字串1113.102800\n1113.10\n+1113.102800\n1,113.102800\n0001113\n1113 我是字串\n\nScanner\n交作業，檢查程式碼等等都會用到的東西\n也算挺方便的東西，不過有些眉角要注意\n前置作業\n匯入API： import java.util.Scanner;\n宣告：Scanner sc = new Scanner(System.in);\n關閉：sc.close();\n輸入的型別\n\n檢查輸入的型別\n檢查：sc.hasNextInt();\n丟棄輸入：sc.next();\n示範\n\n範例\n\nimport java.util.Scanner;\n\npublic class sc {\n\n        Scanner sc = new Scanner(System.in);\n        System.out.printf(\"Please enter grades:\");\n        while (!sc.hasNextInt()) { //檢查是否為整數\n            sc.next();//丟棄不對的\n            System.out.println(\"拜託告訴我\");\n        }\n        int grade = sc.nextInt();\n        System.out.println(\"your grade is \" + grade);\n        \n    }\n  }\n\n結果\nPlease enter grades:不告訴你\n拜託告訴我\nNo\n拜託告訴我\n100\nyour grade is 100\n\n\n\n\n",
    "preview": {},
    "last_modified": "2023-10-17T19:26:11+08:00",
    "input_file": {}
  },
  {
    "path": "Java課程/2023-10-16-javaloop/",
    "title": "Java Loop",
    "description": "Java的迴圈無慎特出，惟，if函數若無法使用得宜，恐未能將其使用得宜。",
    "author": [
      {
        "name": "董宸賓",
        "url": {}
      }
    ],
    "date": "2023-10-15",
    "categories": [],
    "contents": "\n\nContents\n寫迴圈的共通觀念\nwhile\n用反向邏輯來寫if\n搭配switch\ndo while\nfor迴圈\n\n\n\n\n\n\n\n\naa\n\n寫迴圈的共通觀念\n1.先寫裡面，再寫外面\n2.有問題的通常是if\n3.什麼時候用for?什麼時候用while?\n當你不知道要跑幾圈時，用while\n當你知道你要跑幾缺的時候使用if\nwhile\n\n語法\nwhile (條件句) {\n敘述句\n}\n範例\n不要忘了我們是怎麼檢查輸入的\n\nimport java.util.Scanner;\n\npublic class sc {\n\n        Scanner sc = new Scanner(System.in);\n        System.out.printf(\"Please enter grades:\");\n        while (!sc.hasNextInt()) { //檢查是否為整數\n            sc.next();//丟棄不對的\n            System.out.println(\"拜託告訴我\");\n        }\n        int grade = sc.nextInt();\n        System.out.println(\"your grade is \" + grade);\n        \n    }\n  }\n\n結果\nPlease enter grades:不告訴你\n拜託告訴我\nNo\n拜託告訴我\n100\nyour grade is 100\n\n用反向邏輯來寫if\n誒你是不是搞錯了，這章是while餒，怎麼在講if\n就知道你忘了，如何寫好迴圈？\n學好if!\n回到正題，我們太習慣正向邏輯\n但過於複雜的程式使用正向邏輯寫會很亂\n並且難以閱讀\n\n語法\n邏輯就只是把不做的事放在前面，\n這樣不只能讓你好閱讀\n更不用塞堆堆東西在if裡\nwhile (條件句) {\n   if(條件){\n   敘述句;\n   break;\n   }\n   敘述句\n}\n反向邏輯範例\n\nimport java.util.Scanner;\n\npublic class while1() {\n\n    Scanner sc = new Scanner(System.in);\n        System.out.printf(\"請輸入一個西元年(0以離開):\");\n        while (true){\n          int year = sc.nextInt();\n          if(year == 0){\n            System.out.println(\"結束\");\n            break;\n          }\n        boolean a = false;\n        if(year % 4 == 0 &&year%100!=0||year%400==0){\n          a =true;\n        }\n        \n        if (a){\n          System.out.println(\"閏年\");\n        }\n        else{\n          System.out.println(\"平年\");\n        }\n        }\n            \n        }\n            \n\n  }\n\n正向邏輯範例\n\nimport java.util.Scanner;\n\npublic class while1() {\n\n        Scanner sc = new Scanner(System.in);\n        System.out.printf(\"請輸入一個西元年(0以離開):\");\n        while (true) {\n            int year = sc.nextInt();\n            if (year != 0) {\n                boolean a = false;\n                if (year % 4 == 0 && year % 100 != 0 || year % 400 == 0) {\n                    a = true;\n                }\n\n                if (a) {\n                    System.out.println(\"閏年\");\n                } else {\n                    System.out.println(\"平年\");\n                }\n\n            } else {\n                System.out.println(\"結束\");\n                break;\n            }\n\n        }\n\n  }\n\n\n搭配switch\n不囉唆直看範例\n\npublic static void while2() {\n\n        Scanner sc = new Scanner(System.in);\n        String theather;\n        int popcorn;\n        boolean isPopcorn;\n\n        // 設定輸入\n        while (true) {\n            if (!sc.hasNextInt()) {\n                System.out.println(\"掰掰\");\n                break;\n            }\n            popcorn = sc.nextInt();\n            theather = sc.next();\n\n            isPopcorn = (popcorn == 1) ? true : false;// 設定需不需要抱米\n            String decision = (isPopcorn == true) ? \"go to the first floor and then \" : \"\";\n            System.out.print(decision);\n\n            // 電影院在哪\n            switch (theather) {\n            case \"A\":\n                System.out.print(\"go to the second floor.\");\n                break;\n            case \"B\":\n                System.out.print(\"go to the second floor.\");\n                break;\n            case \"C\":\n                System.out.print(\"go to the fourth floor.\");\n                break;\n            case \"D\":\n                System.out.print(\"go to the fourth floor.\");\n                break;\n            case \"E\":\n                System.out.print(\"go to the fifth floor.\");\n                break;\n            }\n\n        }\n        sc.close();\n}\n\ndo while\n他與while唯一不同的是他會先執行一次，即使條件件不符合\n語法：\n\ndo{\n  敘述句\n}while(條件句)\n\nfor迴圈\n上開提及當你知道具體需要跑幾缺時\nfor迴圈就會是你最好的工具\n\n語法\n\nfor (敘述句1;條件句;敘述句2) {\n迴圈內敘述句\n}\n\n敘述句1必定執行的，且只執行一次\n滿足條件句執行迴圈內敘述句\n最後執行敘述句2\n你也可以寫成\n\n敘述句1\nfor (;條件句;) {\n迴圈內敘述句\n敘述句2\n}\n\n這裡看到，如果敘述句1、2皆為單純的敘述句，那何必使用for？\n因此通常是這樣使用for\n\nfor(int i = 0; i < 要跑的圈數; i++){\n  迴圈內敘述句\n}\n\n通常由0開始\n不過身為一個R語言使用者，你可能想從1開始\n條件句要改為<=。\n範例\n非常經典的for迴圈\n因為我們知道要跑的確切次數，使用for迴圈完美\n\npublic static void for1() {\n        int layer;\n        Scanner sc = new Scanner(System.in);\n        System.out.print(\"輸入欲列印的行數: \");\n        layer = sc.nextInt();\n        System.out.println(layer);\n\n        // 上半部的for迴圈，並使用print讓他們呈現於第一行\n        // 當初始值i不超過使用者輸入的layer時進入迴圈\n        for (int i = 1; i <= layer; i++) {\n\n            // 列印空白\n            for (int j = 1; j <= layer - i; j++) {\n                System.out.print(\" \");\n            }\n\n            // 列印基數個\n            for (int k = 1; k <= (2 * i) - 1; k++) {\n                System.out.print(\"*\");\n            }\n\n            System.out.println();\n        }\n\n        // 下半部的for迴圈\n        for (int i = layer - 1; i >= 1; i--) {\n\n            for (int j = 1; j <= layer - i; j++) {\n                System.out.print(\" \");\n            }\n\n            for (int k = 1; k <= 2 * i - 1; k++) {\n                System.out.print(\"*\");\n            }\n\n            System.out.println();\n        }\n        sc.close();\n    }\n\n\n\n\n\n",
    "preview": {},
    "last_modified": "2023-10-17T19:53:29+08:00",
    "input_file": {}
  },
  {
    "path": "Java課程/2023-10-23-java-method/",
    "title": "Java Decision",
    "description": "這是每個程式語言最重要的概念，每個難關就是一個if，跟人生一樣，所以請好好練if",
    "author": [
      {
        "name": "董宸賓",
        "url": {}
      }
    ],
    "date": "2023-10-15",
    "categories": [],
    "contents": "\n\n\n\n\n\n\n\nSam20\nHana30\n\n\n\n\n",
    "preview": {},
    "last_modified": "2023-10-23T17:10:49+08:00",
    "input_file": {}
  },
  {
    "path": "Java課程/2023-10-14-javaoperater/",
    "title": "Java的運算",
    "description": "Java的運算和其他語言相差無幾，但特別注意型別，尤其是在比較與限縮時。",
    "author": [
      {
        "name": "董宸賓",
        "url": {}
      }
    ],
    "date": "2023-09-19",
    "categories": [],
    "contents": "\n\nContents\nJava的Operater\nArithmetic Operators:基礎的數學運算\n%魔術運算的使用時機\n\nAssignment Operators:即=，指派變數的值\nLogical Operators:包括and，or，not\n長程與短程\n\nComparison Operators:比較兩個變數\n\nType Casting\nMath methods\n用scanner取得使用者輸入\n關於運算的小tip\n\n\n\n\n\n\n\nJava的Operater\n分為四種類型\nArithmetic Operators:基礎的數學運算\n\n%魔術運算的使用時機\n1.用來檢測餘數是否為0\n2.做週期運算\n除不了的數字的餘數就是原本的數字\nex:7 % 2 = 2\n3.控制範圍\n假設我要把結果控制在3~15，因此總共有13種變化\n運算：int num2 = (num1 % 13) +3\n4.位置參照\nAssignment Operators:即=，指派變數的值\n\nLogical Operators:包括and，or，not\n\n長程與短程\n&&和||為短程，&&左值不成立，右值不運算，||左值成立，右值不運算\n\n//搭配boolean的運算\n\npublic class Java_in_9_13 {\n public static void main(String[] argv) {\n   \n   int a = 1, b =2, c = 3;\n   \n   boolean d = a >= b && b++ == c\n   \n   System.out.println(a);\n   System.out.println(b);\n   System.out.println(c);\n   System.out.println(d);\n \n }\n  \n}\n\n答案是：1 2 3 false\n這對寫程式很有幫助\n1.利用左值保護右值的概念替換if\n2.減少多餘的運算\nComparison Operators:比較兩個變數\n\n值得注意的是，要盡量避免浮點數(double)的比較\nType Casting\n讓變數在基本型別中進行轉換，分為兩種\nWidening Casting放大型別(automatically)\nbyte -> short -> char -> int -> long -> float -> double\nNarrowing Casting限縮型別\nbyte <- short <- char <- int <- long <- float <- double\n\n\npublic class Java_in_9_13 {\n public static void main(String[] argv) {\n   \n   int i1 = 33;\n   int i4 = 12;\n   double i2 = i1 ;//放大型別不需特別宣告\n   int i3 = (int) i2 ;//縮小型別特別宣告\n   double i5 = (double)(i1+14)/12; //在計算的時候記得要特別宣告\n   \n   System.out.println(i1);\n   System.out.println(i2);\n   System.out.println(i3);\n   System.out.println(i5);\n \n }\n  \n}\n\nMath methods\nMath.min，max找最小，最大值\nMath.sqrt()找平方根後的值\nMath.abs()找絕對值\nMath.random()找出在0~1之間的隨機值\nMath.floor()無條件捨去，Math.ceil()無條件進位，Math.round()四捨五入\n用scanner取得使用者輸入\n\nimport java.util.Scanner;\nimport java.util.Random;\n\npublic class Lab2 {\n\n    public static void main(String[] args) {\n        \n      int num1, num2;\n      \n        Scanner sc = new Scanner(System.in);//打開scanner\n        \n        num1 = sc.nextInt();//由輸入端輸入一個整數\n        num2 = sc.nextInt();//next()取字串，nextByte()取Byte值...\n        \n        System.out.print(\"gap = \"+ num1-num2);\n        \n        sc.close();\n        \n    }\n\n}\n\n關於運算的小tip\n運算和print分開做\n\n\n\n",
    "preview": "Java課程/2023-10-14-javaoperater/Arithmetic.png",
    "last_modified": "2023-10-16T12:12:38+08:00",
    "input_file": {}
  },
  {
    "path": "Java課程/2023-10-14-java/",
    "title": "Java-variable",
    "description": "Java是嚴格的程式語言，正確了解資料型別之特性，學會如何宣告，才能使用好這門語言。",
    "author": [
      {
        "name": "董宸賓",
        "url": {}
      }
    ],
    "date": "2023-08-19",
    "categories": [],
    "contents": "\n\nContents\n什麼是變數\n宣告變數\n變數規則\n駝峰寫法：\n每個變數的名稱都必須符合識別符號(Identifer)規範\n\n資料型別(Data Types)\n基本型別\n布林型別(Boolean Data Type)\n數值型別\n整數型別\n浮點數型別(Floating Point Data Types)\n\n參照型別\n字串(String)\nString Length\ntoUpperCase() and toLowerCase():\nindexOf()\nString equals()\nsubstring\n\n跳脫序列補充\n\n\n\n\n\n\n\n\n什麼是變數\n程式執行時，必須將所需的資料存在一個特別的地方，而這個地方被稱為「變數」\n指定變數讓執行程式更有效率\n宣告變數\njava是一種嚴格型別(Strong-Typed)的程式語言，變數在使用前一定要宣告並指定類型\n變數規則\n駝峰寫法：\n開頭英文小寫，之後英文大寫\nex:eBay、studentAge\n每個變數的名稱都必須符合識別符號(Identifer)規範\n必須以英文字母開頭，大小寫不拘，也可以用”＿“或”$”\n之後可以用0~9\n長度不拘\n不能與保留字(Reserved Word)重複。\n關鍵字：程式執行的動作\n字面常數：java已設定的特定常數\n字母相同，大小寫不同的變數將被視為不同變數\n資料型別(Data Types)\njava中有許多不同的型別，如整數int，double型別d\n其中又可分成兩種類別\n基本型別(Primitive Data Types)：直接放在變數中，存放少量的資料\n參照型別(Reference Data Types)：此型別資料放在額外配置的空間，變數裡的是地址， 經由參照變數的地址找到真正的資料， 通常用來存放大量資料\n基本型別\n分為兩大類，布林型別與數值型別\n布林型別(Boolean Data Type)\n包含true和false\n\n//布林型別範例\npublic class Java_in_9_13 {\n public static void main(String[] argv) {\n boolean test = false;\n System.out.println(\"布林變數答案是\"+test);}\n}\n\n數值型別\n又分為整數型別與浮點數型別\n整數型別\n分為五類\nbyte:-128~127\nshort:-32678~32767\nint:-2147483648~21748364\nlong:-9223372036854775808~9223372036854775807\nchar:0~65535\n可以用10進位、2進位、16進位、8進位\n10進位：非0開頭的整數\n2進位：0b或0B開頭，只有0和1為合法數字\n16進位：0x或0X開頭，可採用任意大寫寫英文字符組成\n8進位：0開頭\n\n//正數型別\npublic class Java_in_9_13 {\n public static void main(String[] argv) {\n System.out.println(\"10進位的1113 =\"+ 1357);\n  \n  //int型別2進位\n int i = 0b10011001;\n System.out.println(\"2進位的0b10011001 = \"+i);\n  \n//long型別16進位\n long l = OXADEF;\n System.out.println(\"8進位的OXADEF = \"+l);\n\n//short型別8進位\nshort s = 01357;\nSystem.out.println(\"8進位的01357 = \"+s);}\n\n//數字過長的情況下建議用底線區隔，使用long型別要在後面加上L\nlong l = 1_113_224_411L;\nSystem.out.println(\"變數l =\"+ l)}\n  \n}\n\nchar可以代表一個單一的Unicode字元\n\n//char範例\npublic class Java_in_9_13 {\n public static void main(String[] argv) {\n   \n char ch;\n ch='b';\n System.out.println(\"變數ch的內容 =\"+ ch);\n \n ch='我';\n System.out.println(\"變數ch的內容 =\"+ ch);\n \n ch=98;//為B的編碼\n System.out.println(\"變數ch的內容 =\"+ ch);\n \n //跳脫序列編碼\n ch='\\u5b57'//16進位5b57是'字'的編碼\n System.out.println(\"變數ch的內容 =\"+ ch);\n  }\n  \n}\n\n浮點數型別(Floating Point Data Types)\n分為float型別與double型別\n注意：double和float建議在後面加上d和f\n得用兩種方式代表\n帶小數點：\n科學記號：ex:1.32E2\n\n\npublic class Java_in_9_13 {\n public static void main(String[] argv) {\n   \n double d =1.32E2;\n System.out.println(\"變數double的內容 =\"+ d);\n \n float f1 = 1.37123F;\n float f2 = 0.12345F;\n float f3 ;\n f3 = f1+f2;\n System.out.println(f3);\n  }\n  \n}\n\n參照型別\n分為三種類別，分別是字串(String)、陣列（Array）、物件（Object)\n字串(String)\nString是一支”class”，所以他是大寫!\n\n//\npublic class Java_in_9_13 {\n public static void main(String[] argv) {\n   \n String s1=\"第一個字串\";\n String s2=\"第二個\\t字串\";//兩個字串中間可以使用跳脫序列;\\t代表字元中的Tab\n \n System.out.println(s1);\n System.out.println(s2);\n System.out.println(s1+\"\\n\"+s2);\n \n  }\n  \n}\n\nString也是一個object，因此他可以使用method，以下示範幾個\nString Length\n\n\npublic class Java_in_9_13 {\n public static void main(String[] argv) {\n   \n String greeting =\"Hello\";\n \n System.out.printf(\"The lenth of greeting: %d\",greeting.length());\n \n  }\n  \n}\n\ntoUpperCase() and toLowerCase():\n\n\npublic class Java_in_9_13 {\n public static void main(String[] argv) {\n   \n String greeting =\"Hello\";\n \n System.out.println(greeting.toLowercase());\n System.out.println(greeting.toUppercase());\n \n  }\n  \n}\n\nindexOf()\n某個字串在另外一個字串的第幾個位置\n\n//\npublic class Java_in_9_13 {\n public static void main(String[] argv) {\n   \n String txt =\"Hello is word\";\n String word = \"Hello\";\n \n System.out.println(txt.indexOf(word));\n \n  }\n  \n}\n\nString equals()\n\n//\npublic class Java_in_9_13 {\n public static void main(String[] argv) {\n   \n   String s1 =\"Hello\";\n   String s2 =\"Hello\";\n   String s3= \"heiio\";\n   \n \n   System.out.println(s1.equals(s2));\n   System.out.println(s1.equals(s3));\n \n  }\n  \n}\n\n這裡要比較String equals()和==\n簡單來說==比較兩個String有沒有相同”地址”\n而equals()比較兩個String有沒有相同的內容\n\n\npublic class Java_in_9_13 {\n public static void main(String[] argv) {\n   String s1 =\"Hello\";\n   String s2 = new String(\"Hello\");\n   \n   System.out.println(s1.equals(s2));\n   System.out.println(s1 == s2);\n \n }\n  \n}\n\nsubstring\n在一個Sting當中，透過給定位置，賦予新的String該位置的內容\n很抽象吧！\n\n\npublic class Java_in_9_13 {\n public static void main(String[] argv) {\n  \n    String A = \"lsy\";\n        String b=A.substring(0,3);\n        //代表從第0個(l)印到第3-1個(y)\n        \n        System.out.printf(\"%s\",b);\n \n }\n  \n}\n\n跳脫序列補充\n\n\n\n\n",
    "preview": {},
    "last_modified": "2023-10-15T14:45:45+08:00",
    "input_file": {}
  }
]
